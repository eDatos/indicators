import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"
import "classpath:/btdesign/metamac-core-common-dtos.btdesign"

Application Indicators {
    basePackage=es.gobcan.istac.indicators
    
    Module core {
		basePackage=es.gobcan.istac.indicators.core
		
		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------     
		
		"Provides access to indicators systems"
    	Service IndicatorSystemService {
    		> @IndicatorSystemRepository
    		> @IndicatorSystemVersionRepository
    		
    		@IndicatorSystemVersion createIndicatorSystem(@IndicatorSystem indicatorSystem, @IndicatorSystemVersion indicatorSystemDraft) throws MetamacException;
	    	@IndicatorSystemVersion retrieveIndicatorSystemVersion(String uuid, Long versionNumber) throws MetamacException;
	    	@IndicatorSystem retrieveIndicatorSystem(String uuid) throws MetamacException;
	    	List<@IndicatorSystem> findIndicatorsSystems(String code) throws MetamacException;
	    	List<@IndicatorSystemVersion> findIndicatorSystemVersions(String uri) throws MetamacException;
    	}
    	
    	"Provides access to indicators systems"
    	Service IndicatorSystemServiceFacade {
	    	> @IndicatorSystemService
	    	
	    	"Creates a indicator system in draft"
	    	@IndicatorSystemDto createIndicatorSystem(@IndicatorSystemDto indicatorSystemDto) throws MetamacException;
	    	"Creates a version on draft of a published indicator system"
	    	String makeDraftIndicatorSystem(@IndicatorSystemDto indicatorSystemDto) throws MetamacException;
	    	"Updates metadata of an indicator system. This version can not be published or archived"
	    	String updateIndicatorSystem(@IndicatorSystemDto indicatorSystemDto) throws MetamacException;
	    	"xxx"
	    	String publishIndicatorSystem(@IndicatorSystemDto indicatorSystemDto) throws MetamacException;
	    	"Retrieves an indicator system. If versionNumber is not provided, retrieves last version"
	    	@IndicatorSystemDto retrieveIndicatorSystem(String uuid, Long versionNumber) throws MetamacException;
	    	"Retrieves an indicator system published"
	    	@IndicatorSystemDto retrieveIndicatorSystemPublished(String uuid) throws MetamacException;
	    	"Deletes an indicator system. Version to remove must be not published nor archived"
	    	deleteIndicatorSystem(String uri) throws MetamacException;
    	}    	

	    // ----------------------------------------------------------------
		// 							ENTITIES
		// ----------------------------------------------------------------        	
		"Indicator system entity"
		Entity IndicatorSystem {
			databaseTable="TBL_INDICATORS_SYSTEMS"
			hint="idSequence=INDICATORS_SYSTEMS"
			gap
			
			"Semantic identifier of statistic operation. Non modifiable"
       		String code required;
		
			// Can not do an OneToOne relation with IndicatorSystemVersion because this produces a CyclicDependency with IndicatorSystem
			"Draft version"
            - @IndicatorSystemVersionInformation draftVersion nullable databaseColumn="DRAFT";
            "Published version"
            - @IndicatorSystemVersionInformation publishedVersion nullable databaseColumn="PUBLISHED";
			"All versions"
			- Bag<@IndicatorSystemVersion> versions cascade="all-delete-orphan" fetch="lazy" inverse <-> indicatorSystem orderby="versionNumber asc";
			
			
			Repository IndicatorSystemRepository {
		   		@IndicatorSystem save(@IndicatorSystem entity);
            	protected List<@IndicatorSystem> findByQuery;
            	@IndicatorSystem retrieveIndicatorSystem(String uuid);
            	List<@IndicatorSystem> findIndicatorsSystems(String code);
			}
		} 
		
		"Version of indicator system entity"
		Entity IndicatorSystemVersion {
			databaseTable="TBL_INDICATOR_SYSTEM_VERS"
			hint="idSequence=INDICATOR_SYSTEM_VERS"
			gap
			
			"State"
			- @IndicatorSystemStateEnum state required;
			Long versionNumber required;
       		"Uri of statistic operation"
       		String uri nullable;
       		"Title of statistic operation"
       		- @InternationalString title cascade="all" databaseColumn="TITLE_FK";
       		"Acronym of statistic operation"
       		- @InternationalString acronym cascade="all" nullable databaseColumn="ACRONYM_FK";
       		"Objetive of statistic operation"
       		- @InternationalString objetive cascade="all" nullable databaseColumn="OBJETIVE_FK";
       		"Description of statistic operation"
       		- @InternationalString description cascade="all" nullable databaseColumn="DESCRIPTION_FK";
			"Publishing date"
			DateTimeTZ publishingDate nullable;
			"Unpublishing date"
			DateTimeTZ unpublishingDate nullable;
					
			"Indicator system"
			- @IndicatorSystem indicatorSystem not nullable cascade="none" databaseColumn="INDICATOR_SYTEM_FK" <-> versions;
		
			Repository IndicatorSystemVersionRepository {
				@IndicatorSystemVersion save(@IndicatorSystemVersion entity);
            	protected List<@IndicatorSystemVersion> findByQuery;
            	@IndicatorSystemVersion retrieveIndicatorSystemVersion(String uuid, Long versionNumber);
            	List<@IndicatorSystemVersion> findIndicatorSystemVersions(String uri);
			}
		} 
		
        BasicType IndicatorSystemVersionInformation {
        	gap
        	"Id into database of IndicatorSystemVersion"
    		Long idIndicatorSystemVersion nullable databaseColumn="ID";
    		"Version number of IndicatorSystemVersion"
    		Long versionNumber nullable databaseColumn="VERSION_NUMBER";
    	}		
    
	    // ----------------------------------------------------------------
		// 							DTOS
		// ----------------------------------------------------------------        	
		"Dto for indicator system"
	   	DataTransferObject IndicatorSystemDto extends @AuditableDto {
			
			"Unique uuid"
			String uuid;
			"Version number of this indicator system version"	
			Long versionNumber;
			"State"
			- @IndicatorSystemStateEnum state;
			"Semantic identifier of statistic operation"
       		String code;
       		"Uri of statistic operation"
       		String uri;
       		"Title of statistic operation"
       		- @InternationalStringDto title;
       		"Acronym of statistic operation"
       		- @InternationalStringDto acronym;
       		"Description of statistic operation"
       		- @InternationalStringDto description;
       		"Objetive of statistic operation"
       		- @InternationalStringDto objetive;			
       		"Version number of draft"
       		Long draftVersion;
       		"Version number of published"       		
			Long publishedVersion;
			"Publishing date of this version"
			JAVADATE publishingDate; 
			"Unpublishing date of this version"
			JAVADATE unpublishingDate;            
	    }
	        
		// ----------------------------------------------------------------
		// 							ENUMS
		// ----------------------------------------------------------------
		"States of indicator system"
    	enum IndicatorSystemStateEnum {
    		DRAFT,
    		PRODUCTION_VALIDATION,
    		PUBLISH_VALIDATION,
    		PUBLISHED,
    		ARCHIVED
    	}      	
    }
}