import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"
import "classpath:/btdesign/metamac-core-common-dtos.btdesign"

Application Indicators {
    basePackage=es.gobcan.istac.indicators
    
    Module core {
		basePackage=es.gobcan.istac.indicators.core
		
		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------     
		
		"Provides access to indicators systems"
    	Service IndicatorsSystemsService {
    		> @IndicatorsSystemRepository
    		> @IndicatorsSystemVersionRepository
    		> @DimensionRepository
    		
    		// Indicators system
    		@IndicatorsSystemVersion createIndicatorsSystemVersion(@IndicatorsSystem indicatorsSystem, @IndicatorsSystemVersion indicatorsSystemVersion) throws MetamacException;
	    	@IndicatorsSystemVersion retrieveIndicatorsSystemVersion(String uuid, String versionNumber) throws MetamacException;
	    	@IndicatorsSystem retrieveIndicatorsSystem(String uuid) throws MetamacException;
	    	updateIndicatorsSystem(@IndicatorsSystem indicatorsSystem) throws MetamacException;
	    	updateIndicatorsSystemVersion(@IndicatorsSystemVersion indicatorsSystemVersion) throws MetamacException;
	    	deleteIndicatorsSystem(String uuid) throws MetamacException;
	    	deleteIndicatorsSystemVersion(String uuid, String versionNumber) throws MetamacException;
	    	List<@IndicatorsSystem> findIndicatorsSystems(String code) throws MetamacException;
	    	List<@IndicatorsSystemVersion> findIndicatorsSystemVersions(String uriGopestat, @IndicatorsSystemStateEnum state) throws MetamacException;
	    	
	    	// Dimensions
	    	@Dimension createDimension(@Dimension dimension) throws MetamacException;
	    	@Dimension updateDimension(@Dimension dimension) throws MetamacException;
	    	@Dimension retrieveDimension(String uuid) throws MetamacException;
	    	deleteDimension(@Dimension dimension) throws MetamacException;
	    	List<@Dimension> findDimensions(String indicatorsSystemUuid, String indicatorsSystemVersionNumber) throws MetamacException;	    	
    	}
    	
    	"Provides access to indicators"
    	Service IndicatorsService {
    		> @IndicatorRepository
    		> @IndicatorVersionRepository
    		> @DataSourceRepository
    		
    		// Indicator
    		@IndicatorVersion createIndicatorVersion(@Indicator indicator, @IndicatorVersion indicatorVersion) throws MetamacException;
	    	@IndicatorVersion retrieveIndicatorVersion(String uuid, String versionNumber) throws MetamacException;
	    	@Indicator retrieveIndicator(String uuid) throws MetamacException;
	    	updateIndicator(@Indicator indicator) throws MetamacException;
	    	updateIndicatorVersion(@IndicatorVersion indicatorVersion) throws MetamacException;
	    	deleteIndicator(String uuid) throws MetamacException;
	    	deleteIndicatorVersion(String uuid, String versionNumber) throws MetamacException;
	    	List<@Indicator> findIndicators(String code) throws MetamacException;
	    	List<@IndicatorVersion> findIndicatorsVersions(String uriGopestat, @IndicatorStateEnum state) throws MetamacException;
	    	
	    	// Data sources
	    	@DataSource createDataSource(@DataSource dataSource) throws MetamacException;
	    	@DataSource updateDataSource(@DataSource dataSource) throws MetamacException;
	    	@DataSource retrieveDataSource(String uuid) throws MetamacException;
	    	deleteDataSource(@DataSource dataSource) throws MetamacException;
	    	List<@DataSource> findDataSources(String indicatorUuid, String indicatorVersionNumber) throws MetamacException;	    	
    	}
    	
    	"Provides access to indicators systems"
    	Service IndicatorsSystemsServiceFacade {
	    	> @IndicatorsSystemsService
	    	
	    	// INDICATORS SYSTEMS
	    	"Creates an indicators system"
	    	@IndicatorsSystemDto createIndicatorsSystem(@IndicatorsSystemDto indicatorsSystemDto) throws MetamacException;
	    	"Updates metadata of an indicators system. This version can not be published or archived"
	    	updateIndicatorsSystem(@IndicatorsSystemDto indicatorsSystemDto) throws MetamacException;
	    	"Retrieves an indicators system. If versionNumber is not provided, retrieves last version"
	    	@IndicatorsSystemDto retrieveIndicatorsSystem(String uuid, String versionNumber) throws MetamacException;
	    	"Retrieves an indicators system published"
	    	@IndicatorsSystemDto retrieveIndicatorsSystemPublished(String uuid) throws MetamacException;
	    	"Retrieves an indicators system by code. Retrieves last version"
	    	@IndicatorsSystemDto retrieveIndicatorsSystemByCode(String code) throws MetamacException;
	    	"Retrieves an indicators system by code. Retrieves diffusion version"
	    	@IndicatorsSystemDto retrieveIndicatorsSystemPublishedByCode(String code) throws MetamacException;
	    	"Deletes a version of an indicators system. Version to remove must be not published nor archived"
	    	deleteIndicatorsSystem(String uuid) throws MetamacException;
	    	"Sends indicators system to production validation"
	    	sendIndicatorsSystemToProductionValidation(String uuid) throws MetamacException;
	    	"Sends indicators system to diffusion validation"
	    	sendIndicatorsSystemToDiffusionValidation(String uuid) throws MetamacException;
	    	"Rejects validation of indicators system"
	    	rejectIndicatorsSystemValidation(String uuid) throws MetamacException;
	    	"Publishes indicators system"
	    	publishIndicatorsSystem(String uuid) throws MetamacException;	    		    	
	    	"Archives indicators system"
	    	archiveIndicatorsSystem(String uuid) throws MetamacException;	    		    	
	    	"Creates a version on draft of an indicators system in diffusion. Returns new version created"
	    	@IndicatorsSystemDto versioningIndicatorsSystem(String uuid, @VersiontTypeEnum versionType) throws MetamacException;
	    	"Finds indicators systems. Retrieves last versions"
	    	List<@IndicatorsSystemDto> findIndicatorsSystems() throws MetamacException;
	    	"Finds published indicators systems"
	    	List<@IndicatorsSystemDto> findIndicatorsSystemsPublished() throws MetamacException;
	    	
	    	// DIMENSIONS
	    	"Creates a dimension"
	    	@DimensionDto createDimension(String indicatorsSystemUuid, @DimensionDto dimensionDto) throws MetamacException;
	    	"Updates metadata of dimension"
	    	updateDimension(@DimensionDto dimensionDto) throws MetamacException;
	    	"Updates the location of dimension"
	    	updateDimensionLocation(String uuid, String parentTargetUuid, Long orderInLevel) throws MetamacException;
	    	"Retrieves dimension"
	    	@DimensionDto retrieveDimension(String uuid) throws MetamacException;
	    	"Deletes dimension"
	    	deleteDimension(String uuid) throws MetamacException;
	    	"Find dimensions"
	    	List<@DimensionDto> findDimensions(String indicatorsSystemUuid, String indicatorsSystemVersionNumber) throws MetamacException;	    	
	    }    	
	    
	    "Provides access to indicators"
    	Service IndicatorsServiceFacade {
	    	> @IndicatorsService
	    	
	    	"Creates an indicator"
	    	@IndicatorDto createIndicator(@IndicatorDto indicatorDto) throws MetamacException;
	    	"Updates metadata of an indicator. This version can not be published or archived"
	    	updateIndicator(@IndicatorDto indicatorDto) throws MetamacException;
	    	"Retrieves an indicator. If versionNumber is not provided, retrieves last version"
	    	@IndicatorDto retrieveIndicator(String uuid, String versionNumber) throws MetamacException;
	    	"Retrieves an indicator published"
	    	@IndicatorDto retrieveIndicatorPublished(String uuid) throws MetamacException;
	    	"Deletes a version of an indicator. Version to remove must be not published nor archived"
	    	deleteIndicator(String uuid) throws MetamacException;
	    	"Sends indicator to production validation"
	    	sendIndicatorToProductionValidation(String uuid) throws MetamacException;
	    	"Sends indicator to diffusion validation"
	    	sendIndicatorToDiffusionValidation(String uuid) throws MetamacException;
	    	"Rejects validation of indicator"
	    	rejectIndicatorValidation(String uuid) throws MetamacException;
	    	"Publishes indicator"
	    	publishIndicator(String uuid) throws MetamacException;	    		    	
//	    	"Archives indicator"
//	    	archiveIndicator(String uuid) throws MetamacException;	    		    	
	    	"Creates a version on draft of an indicator in diffusion. Returns new version created"
	    	@IndicatorDto versioningIndicator(String uuid, @VersiontTypeEnum versionType) throws MetamacException;
	    	"Finds indicators. Retrieves last versions"
	    	List<@IndicatorDto> findIndicators() throws MetamacException;
	    	"Finds published indicators"
	    	List<@IndicatorDto> findIndicatorsPublished() throws MetamacException;
	    	
	    	// Datasources
	    	"Creates a data source"
	    	@DataSourceDto createDataSource(String indicatorUuid, @DataSourceDto dataSourceDto) throws MetamacException;
	    	"Updates metadata of data source"
	    	updateDataSource(@DataSourceDto dataSourceDto) throws MetamacException;
	    	"Retrieves data source"
	    	@DataSourceDto retrieveDataSource(String uuid) throws MetamacException;
	    	"Deletes data source"
	    	deleteDataSource(String uuid) throws MetamacException;
	    	"Find data sources"
	    	List<@DataSourceDto> findDataSources(String indicatorUuid, String indicatorVersionNumber) throws MetamacException;	    	
	    }

	    // ----------------------------------------------------------------
		// 							ENTITIES
		// ----------------------------------------------------------------        	
		"Indicators system entity"
		Entity IndicatorsSystem {
			databaseTable="TBL_INDICATORS_SYSTEMS"
			hint="idSequence=INDICATORS_SYSTEMS"
			gap
			
			"Semantic identifier of statistic operation. Non modifiable"
       		String code required;
		
			// Can not do an OneToOne relation with IndicatorsSystemVersion because this produces a CyclicDependency with IndicatorsSystem
			"Version in production"
            - @IndicatorsSystemVersionInformation productionVersion nullable databaseColumn="PRODUCTION";
            "Version in diffusion"
            - @IndicatorsSystemVersionInformation diffusionVersion nullable databaseColumn="DIFFUSION";
			"All versions"
			- Bag<@IndicatorsSystemVersion> versions cascade="all-delete-orphan" fetch="lazy" inverse <-> indicatorsSystem orderby="versionNumber asc";
			
			
			Repository IndicatorsSystemRepository {
		   		@IndicatorsSystem save(@IndicatorsSystem entity);
		   		delete;
            	protected List<@IndicatorsSystem> findByQuery;
            	protected List<@IndicatorsSystem> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@IndicatorsSystem retrieveIndicatorsSystem(String uuid);
            	List<@IndicatorsSystem> findIndicatorsSystems(String code);
			}
		} 
		
		"Version of indicators system entity"
		Entity IndicatorsSystemVersion {
			databaseTable="TBL_INDIC_SYSTEMS_VERSIONS"
			hint="idSequence=INDIC_SYSTEMS_VERSIONS"
			gap
			
			"State"
			- @IndicatorsSystemStateEnum state required;
			String versionNumber required length="10";
       		"Uri of statistic operation in Gopestat"
       		String uriGopestat nullable;
       		"Title of statistic operation"
       		- @InternationalString title cascade="all" databaseColumn="TITLE_FK";
       		"Acronym of statistic operation"
       		- @InternationalString acronym cascade="all" nullable databaseColumn="ACRONYM_FK";
       		"Objetive of statistic operation"
       		- @InternationalString objetive cascade="all" nullable databaseColumn="OBJETIVE_FK";
       		"Description of statistic operation"
       		- @InternationalString description cascade="all" nullable databaseColumn="DESCRIPTION_FK";
       		
			"Date when the indicators system was sended to production validation"
			DateTimeTZ productionValidationDate nullable;
			"User who sended to production validation"
			String productionValidationUser nullable;
			"Date when the indicators system was sended to diffusion validation"
			DateTimeTZ diffusionValidationDate nullable;
			"User who sended to diffusion validation"
			String diffusionValidationUser nullable;
			"Date when the indicators system was published"
			DateTimeTZ publicationDate nullable;
			"User who published"
			String publicationUser nullable;
			"Date when the indicators system was archived"
			DateTimeTZ archiveDate nullable;
			"User who archived"
			String archiveUser nullable;
					
			// Relations
			"Indicator system"
			- @IndicatorsSystem indicatorsSystem not nullable cascade="none" databaseColumn="INDICATORS_SYSTEM_FK" <-> versions;
			"Dimensions"
			- Bag<@Dimension> dimensions cascade="all-delete-orphan" fetch="lazy" inverse orderby="orderInLevel asc" <-> indicatorsSystemVersion;
			
		
			Repository IndicatorsSystemVersionRepository {
				@IndicatorsSystemVersion save(@IndicatorsSystemVersion entity);
				delete;
            	protected List<@IndicatorsSystemVersion> findByQuery;
            	protected List<@IndicatorsSystemVersion> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@IndicatorsSystemVersion retrieveIndicatorsSystemVersion(String uuid, String versionNumber);
            	List<@IndicatorsSystemVersion> findIndicatorsSystemVersions(String uriGopestat, @IndicatorsSystemStateEnum state);
			}
		} 
		
        "Dimension of indicators system"
        Entity Dimension {
        	databaseTable = "TBL_DIMENSIONS"
        	hint="idSequence=DIMENSIONS"
        	
            "Title"
            - @InternationalString title cascade="all" not nullable  databaseColumn="TITLE_FK";
            "Order in level"
			Long orderInLevel not nullable;
			
			// Relations
            "Parent dimension"
            - @Dimension parent cascade="none" databaseColumn="PARENT_FK" nullable;
			"Subdimensions"
			- Bag<@Dimension> subdimensions cascade="all-delete-orphan" inverse databaseColumn="PARENT_FK" orderby="orderInLevel asc";
            "Indicators system version"
			- @IndicatorsSystemVersion indicatorsSystemVersion cascade="none" fetch="lazy" nullable databaseColumn="INDICATORS_SYSTEM_VERSION_FK" <-> dimensions;
            
			"Provides access to Dimension"
            Repository DimensionRepository {
            	@Dimension save(@Dimension entity);
            	delete;
            	protected List<@Dimension> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@Dimension findDimension(String uuid);
            }
        }  		
		
        BasicType IndicatorsSystemVersionInformation {
        	gap
        	"Id into database of IndicatorsSystemVersion"
    		Long idIndicatorsSystemVersion nullable databaseColumn="ID";
    		"Version number of IndicatorsSystemVersion"
    		String versionNumber nullable databaseColumn="VERSION_NUMBER" length="10";
    	}	
    	
		"Indicator entity"
		Entity Indicator {
			databaseTable="TBL_INDICATORS"
			hint="idSequence=INDICATORS"
			gap

			"Code. Non modifiable"
			String code required;
			
			// Can not do an OneToOne relation with IndicatorVersion because this produces a CyclicDependency with Indicator
			"Version in production"
            - @IndicatorVersionInformation productionVersion nullable databaseColumn="PRODUCTION";
            "Version in diffusion"
            - @IndicatorVersionInformation diffusionVersion nullable databaseColumn="DIFFUSION";
			"All versions"
			- Bag<@IndicatorVersion> versions cascade="all-delete-orphan" fetch="lazy" inverse <-> indicator orderby="versionNumber asc";
			
			
			Repository IndicatorRepository {
		   		@Indicator save(@Indicator entity);
		   		delete;
            	protected List<@Indicator> findByQuery;
            	protected List<@Indicator> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@Indicator retrieveIndicator(String uuid);
            	List<@Indicator> findIndicators(String code);
			}
		}
	    
		"Version of indicator entity"
		Entity IndicatorVersion {
			databaseTable="TBL_INDICATOR_VERSIONS"
			hint="idSequence=INDICATOR_VERSIONS"
			gap
			
			"State"
			- @IndicatorStateEnum state required;
			String versionNumber required length="10";
       		"Name"
       		- @InternationalString name cascade="all" required databaseColumn="NAME_FK";
       		"Acronym"
       		- @InternationalString acronym cascade="all" nullable databaseColumn="ACRONYM_FK";
       		"Subject code"
			String subjectCode nullable;
			"Commentary"
       		- @InternationalString commentary cascade="all" nullable databaseColumn="COMMENTARY_FK";
			"Notes"
       		- @InternationalString notes  cascade="all" nullable databaseColumn="NOTES_FK";
       		"Note url"
       		String noteUrl nullable;
       		
			"Date when the indicator was sended to production validation"
			DateTimeTZ productionValidationDate nullable;
			"User who sended to production validation"
			String productionValidationUser nullable;
			"Date when the indicator was sended to diffusion validation"
			DateTimeTZ diffusionValidationDate nullable;
			"User who sended to diffusion validation"
			String diffusionValidationUser nullable;
			"Date when the indicator was published"
			DateTimeTZ publicationDate nullable;
			"User who published"
			String publicationUser nullable;
			"Date when the indicator was archived"
			DateTimeTZ archiveDate nullable;
			"User who archived"
			String archiveUser nullable;
					
			// Relations
			"Indicator"
			- @Indicator indicator not nullable cascade="none" databaseColumn="INDICATOR_FK" <-> versions;
			"Data sources"
			- Bag<@DataSource> dataSources cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> indicatorVersion;
		
			Repository IndicatorVersionRepository {
				@IndicatorVersion save(@IndicatorVersion entity);
				delete;
            	protected List<@IndicatorVersion> findByQuery;
            	protected List<@IndicatorVersion> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@IndicatorVersion retrieveIndicatorVersion(String uuid, String versionNumber);
            	List<@IndicatorVersion> findIndicatorsVersions(@IndicatorStateEnum state);
			}
		}     	
		
        BasicType IndicatorVersionInformation {
        	gap
        	"Id into database of IndicatorVersion"
    		Long idIndicatorVersion nullable databaseColumn="ID";
    		"Version number of IndicatorVersion"
    		String versionNumber nullable databaseColumn="VERSION_NUMBER" length="10";
    	}			
    	
		"Data source of indicator"
        Entity DataSource {
        	databaseTable = "TBL_DATA_SOURCES"
        	hint="idSequence=DATA_SOURCES"
        	gap
        	
			"Query in GPE"
			String queryGpe required;
			"Px"
			String px required;
			"Temporary variable"
			String temporaryVariable required;
			"Geographic variable"
			String geographicVariable required;
			"Other variables fixing one category"
			- Bag<@DataSourceVariable> otherVariables cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" databaseColumn="DATA_SOURCE_FK";
			
			// Relations
            "Indicator version"
			- @IndicatorVersion indicatorVersion cascade="none" fetch="lazy" nullable databaseColumn="INDICATOR_VERSION_FK" <-> dataSources;
            
			"Provides access to Dimension"
            Repository DataSourceRepository {
            	@DataSource save(@DataSource entity);
            	delete;
            	protected List<@DataSource> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@DataSource findDataSource(String uuid);
            }
        }  	   

		"Variable of data source"
        Entity DataSourceVariable {
        	databaseTable = "TBL_DATA_SOURCE_VARIABLES"
        	hint="idSequence=DATA_SOURCE_VARIABLES"
        	gap
        	
			"Variable"
			String variable required;
			"Category"
			String category required;
        }  	    	
	}
	
	// ----------------------------------------------------------------
	// 							ENUMS
	// ----------------------------------------------------------------
	
	Module dtos {    	
		basePackage=es.gobcan.istac.indicators.core.dto
		
		"Dto for indicators system"
	   	DataTransferObject IndicatorsSystemDto extends @AuditDto {
			
			"Unique uuid"
			String uuid;
			"Version number of this indicators system version"	
			String versionNumber;
			"State"
			- @IndicatorsSystemStateEnum state;
			"Semantic identifier of statistic operation"
       		String code;
       		"Uri of statistic operation in Gopestat"
       		String uriGopestat;
       		"Title of statistic operation"
       		- @InternationalStringDto title;
       		"Acronym of statistic operation"
       		- @InternationalStringDto acronym;
       		"Description of statistic operation"
       		- @InternationalStringDto description;
       		"Objetive of statistic operation"
       		- @InternationalStringDto objetive;			
       		"Number of version in production"
       		String productionVersion;
       		"Number of version in diffusion"   		
			String diffusionVersion;			
			
			"Date when the indicators system was sended to production validation"
			JAVADATE productionValidationDate;
			"User who sended to production validation"
			String productionValidationUser;
			"Date when the indicators system was sended to diffusion validation"
			JAVADATE diffusionValidationDate;
			"User who sended to diffusion validation"
			String diffusionValidationUser;
			"Date when the indicators system was published"
			JAVADATE publicationDate;
			"User who published"
			String publicationUser;
			"Date when the indicators system was archived"
			JAVADATE archiveDate;
			"User who archived"
			String archiveUser;
	    }
	    
	    "Dto for indicator"
	   	DataTransferObject IndicatorDto extends @AuditDto {
			
			"Unique uuid"
			String uuid;
			"Version number of this indicator version"	
			String versionNumber;
			"Code"
			String code;
			"State"
			- @IndicatorStateEnum state;
       		"Name"
       		- @InternationalStringDto name;
       		"Acronym"
       		- @InternationalStringDto acronym;
       		"Subject code"
			String subjectCode;
			"Commentary"
       		- @InternationalStringDto commentary;
			"Notes"
       		- @InternationalStringDto notes;
       		"Note url"
       		String noteUrl;        
       		
       		"Number of version in production"
       		String productionVersion;
       		"Number of version in diffusion"   		
			String diffusionVersion;			
			
			"Date when the indicators system was sended to production validation"
			JAVADATE productionValidationDate;
			"User who sended to production validation"
			String productionValidationUser;
			"Date when the indicators system was sended to diffusion validation"
			JAVADATE diffusionValidationDate;
			"User who sended to diffusion validation"
			String diffusionValidationUser;
			"Date when publication failed"
			JAVADATE publicationFailedDate;
			"User who publication failed"
			String publicationFailedUser;
			"Date when the indicators system was published"
			JAVADATE publicationDate;
			"User who published"
			String publicationUser;
			"Date when the indicators system was archived"
			JAVADATE archiveDate;
			"User who archived"
			String archiveUser;       		    
	    }
	    
	    "Dto for dimension"
	   	DataTransferObject DimensionDto extends @AuditDto {
			
			"Unique uuid"
			String uuid;
			"Title"
			- @InternationalStringDto title;
            "Order in level"
			Long orderInLevel not nullable;
			"Parent dimension"
			String parentDimensionUuid;			
       		"Subdimensions"
       		- List<@DimensionDto> subdimensions;            
	    }
	    
	    "Dto for data source"
	   	DataTransferObject DataSourceDto extends @AuditDto {
			gap
	   		
			"Unique uuid"
			String uuid;
			"Query in GPE"
			String queryGpe;
			"Px"
			String px;
			"Temporary variable"
			String temporaryVariable;
			"Geographic variable"
			String geographicVariable;
			"Other variables fixing one category"
			- List<@DataSourceVariableDto> otherVariables; 
	    }
	    
	    "Dto for variables and categories"
	   	DataTransferObject DataSourceVariableDto {
	   		"Variable"
			String variable;
			"Category fixed"
			String category;
	    }
	    
	    "AuditDto"
    	DataTransferObject AuditDto {
       		JAVADATE createdDate;
       		String createdBy;
       		JAVADATE lastUpdated;
       		String lastUpdatedBy;
    	}
	}
	
	// ----------------------------------------------------------------
	// 							ENUMS
	// ----------------------------------------------------------------
	
	Module enums {    	
		basePackage=es.gobcan.istac.indicators.core.enume

		"States of indicators system"
    	enum IndicatorsSystemStateEnum {
    		DRAFT,
    		PRODUCTION_VALIDATION,
    		DIFFUSION_VALIDATION,
    		VALIDATION_REJECTED,
    		PUBLISHED,
    		ARCHIVED
    	}      
		"States of indicator"
    	enum IndicatorStateEnum {
    		DRAFT,
    		PRODUCTION_VALIDATION,
    		DIFFUSION_VALIDATION,
    		VALIDATION_REJECTED,
    		PUBLICATION_FAILED,    		
    		PUBLISHED,
    		ARCHIVED
    	}	
    	"Type of version of the change"
    	enum VersiontTypeEnum {
    		MAJOR,
    		MINOR
    	}	
	}
}