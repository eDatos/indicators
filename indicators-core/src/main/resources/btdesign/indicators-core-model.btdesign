import "classpath:/btdesign/export/metamac-core-common-entity.btdesign"
import "classpath:/btdesign/metamac-core-common-dtos.btdesign"

Application Indicators {
    basePackage=es.gobcan.istac.indicators
    
    Module core {
		basePackage=es.gobcan.istac.indicators.core
		
		// ----------------------------------------------------------------
		// 							SERVICES
		// ----------------------------------------------------------------     
		
		"Provides access to indicators systems"
    	Service IndicatorsSystemService {
    		> @IndicatorsSystemRepository
    		> @IndicatorsSystemVersionRepository
    		> @DimensionRepository
    		
    		// Indicators system
    		@IndicatorsSystemVersion createIndicatorsSystemVersion(@IndicatorsSystem indicatorsSystem, @IndicatorsSystemVersion indicatorsSystemVersion) throws MetamacException;
	    	@IndicatorsSystemVersion retrieveIndicatorsSystemVersion(String uuid, String versionNumber) throws MetamacException;
	    	@IndicatorsSystem retrieveIndicatorsSystem(String uuid) throws MetamacException;
	    	updateIndicatorsSystem(@IndicatorsSystem indicatorsSystem) throws MetamacException;
	    	updateIndicatorsSystemVersion(@IndicatorsSystemVersion indicatorsSystemVersion) throws MetamacException;
	    	deleteIndicatorsSystem(String uuid) throws MetamacException;
	    	deleteIndicatorsSystemVersion(String uuid, String versionNumber) throws MetamacException;
	    	List<@IndicatorsSystem> findIndicatorsSystems(String code) throws MetamacException;
	    	List<@IndicatorsSystemVersion> findIndicatorsSystemVersions(String uriGopestat, @IndicatorsSystemStateEnum state) throws MetamacException;
	    	
	    	// Dimensions
	    	@Dimension createDimension(@Dimension dimension) throws MetamacException;
	    	@Dimension updateDimension(@Dimension dimension) throws MetamacException;
	    	@Dimension retrieveDimension(String uuid) throws MetamacException;
	    	deleteDimension(@Dimension dimension) throws MetamacException;
	    	
    	}
    	
    	"Provides access to indicators systems"
    	Service IndicatorsSystemServiceFacade {
	    	> @IndicatorsSystemService
	    	
	    	// INDICATORS SYSTEMS
	    	"Creates an indicator system in draft"
	    	@IndicatorsSystemDto createIndicatorsSystem(@IndicatorsSystemDto indicatorsSystemDto) throws MetamacException;
	    	"Updates metadata of an indicator system. This version can not be published or archived"
	    	updateIndicatorsSystem(@IndicatorsSystemDto indicatorsSystemDto) throws MetamacException;
	    	"Retrieves an indicator system. If versionNumber is not provided, retrieves last version"
	    	@IndicatorsSystemDto retrieveIndicatorsSystem(String uuid, String versionNumber) throws MetamacException;
	    	"Retrieves an indicator system published"
	    	@IndicatorsSystemDto retrieveIndicatorsSystemPublished(String uuid) throws MetamacException;
	    	"Deletes a version of an indicator system. Version to remove must be not published nor archived"
	    	deleteIndicatorsSystem(String uuid) throws MetamacException;
	    	"Sends indicators system to production validation"
	    	sendIndicatorsSystemToProductionValidation(String uuid) throws MetamacException;
	    	"Sends indicators system to diffusion validation"
	    	sendIndicatorsSystemToDiffusionValidation(String uuid) throws MetamacException;
	    	"Rejects validation of indicators system"
	    	rejectIndicatorsSystemValidation(String uuid) throws MetamacException;
	    	"Publishes indicators system"
	    	publishIndicatorsSystem(String uuid) throws MetamacException;	    		    	
	    	"Archives indicators system"
	    	archiveIndicatorsSystem(String uuid) throws MetamacException;	    		    	
	    	"Creates a version on draft of an indicator system in production. Returns new version created"
	    	@IndicatorsSystemDto versioningIndicatorsSystem(String uuid, @IndicatorsSystemVersionEnum versionType) throws MetamacException;
	    	"Finds indicators systems. Retrieves last versions"
	    	List<@IndicatorsSystemDto> findIndicatorsSystems() throws MetamacException;
	    	"Finds published indicators systems"
	    	List<@IndicatorsSystemDto> findIndicatorsSystemsPublished() throws MetamacException;
	    	
	    	// DIMENSIONS
	    	"Creates a dimension"
	    	@DimensionDto createDimension(String indicatorsSystemUuid, @DimensionDto dimensionDto) throws MetamacException;
	    	"Retrieves dimension"
	    	@DimensionDto retrieveDimension(String uuid) throws MetamacException;
	    	"Deletes dimension"
	    	deleteDimension(String uuid) throws MetamacException;
	    }    	

	    // ----------------------------------------------------------------
		// 							ENTITIES
		// ----------------------------------------------------------------        	
		"Indicator system entity"
		Entity IndicatorsSystem {
			databaseTable="TBL_INDICATORS_SYSTEMS"
			hint="idSequence=INDICATORS_SYSTEMS"
			gap
			
			"Semantic identifier of statistic operation. Non modifiable"
       		String code required;
		
			// Can not do an OneToOne relation with IndicatorsSystemVersion because this produces a CyclicDependency with IndicatorsSystem
			"Version in production"
            - @IndicatorsSystemVersionInformation productionVersion nullable databaseColumn="PRODUCTION";
            "Version in difussion"
            - @IndicatorsSystemVersionInformation diffusionVersion nullable databaseColumn="DIFFUSION";
			"All versions"
			- Bag<@IndicatorsSystemVersion> versions cascade="all-delete-orphan" fetch="lazy" inverse <-> indicatorsSystem orderby="versionNumber asc";
			
			
			Repository IndicatorsSystemRepository {
		   		@IndicatorsSystem save(@IndicatorsSystem entity);
		   		delete;
            	protected List<@IndicatorsSystem> findByQuery;
            	protected List<@IndicatorsSystem> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@IndicatorsSystem retrieveIndicatorsSystem(String uuid);
            	List<@IndicatorsSystem> findIndicatorsSystems(String code);
			}
		} 
		
		"Version of indicator system entity"
		Entity IndicatorsSystemVersion {
			databaseTable="TBL_INDIC_SYSTEMS_VERSIONS"
			hint="idSequence=INDIC_SYSTEMS_VERSIONS"
			gap
			
			"State"
			- @IndicatorsSystemStateEnum state required;
			String versionNumber required length="10";
       		"Uri of statistic operation in Gopestat"
       		String uriGopestat nullable;
       		"Title of statistic operation"
       		- @InternationalString title cascade="all" databaseColumn="TITLE_FK";
       		"Acronym of statistic operation"
       		- @InternationalString acronym cascade="all" nullable databaseColumn="ACRONYM_FK";
       		"Objetive of statistic operation"
       		- @InternationalString objetive cascade="all" nullable databaseColumn="OBJETIVE_FK";
       		"Description of statistic operation"
       		- @InternationalString description cascade="all" nullable databaseColumn="DESCRIPTION_FK";
       		
			"Date when the indicators system was sended to production validation"
			DateTimeTZ productionValidationDate nullable;
			"User who sended to production validation"
			String productionValidationUser nullable;
			"Date when the indicators system was sended to diffusion validation"
			DateTimeTZ diffusionValidationDate nullable;
			"User who sended to diffusion validation"
			String diffusionValidationUser nullable;
			"Date when the indicators system was published"
			DateTimeTZ publicationDate nullable;
			"User who published"
			String publicationUser nullable;
			"Date when the indicators system was archived"
			DateTimeTZ archiveDate nullable;
			"User who archived"
			String archiveUser nullable;
					
			// Relations
			"Indicator system"
			- @IndicatorsSystem indicatorsSystem not nullable cascade="none" databaseColumn="INDICATORS_SYSTEMS_FK" <-> versions;
			"Dimensions"
			- Bag<@Dimension> dimensions cascade="all-delete-orphan" fetch="lazy" inverse orderby="id asc" <-> indicatorsSystemVersion;
			
		
			Repository IndicatorsSystemVersionRepository {
				@IndicatorsSystemVersion save(@IndicatorsSystemVersion entity);
				delete;
            	protected List<@IndicatorsSystemVersion> findByQuery;
            	protected List<@IndicatorsSystemVersion> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@IndicatorsSystemVersion retrieveIndicatorsSystemVersion(String uuid, String versionNumber);
            	List<@IndicatorsSystemVersion> findIndicatorsSystemVersions(String uriGopestat, @IndicatorsSystemStateEnum state);
			}
		} 
		
        "Dimension of indicators system"
        Entity Dimension {
        	databaseTable = "TBL_DIMENSIONS"
        	hint="idSequence=DIMENSIONS"
        	
            "Title"
            - @InternationalString title not nullable cascade="all" databaseColumn="TITLE_FK";

			// Relations
            "Parent dimension"
            - @Dimension parent cascade="none" databaseColumn="PARENT_FK" nullable;
			"Subdimensions"
			- Bag<@Dimension> subdimensions cascade="all-delete-orphan" inverse databaseColumn="PARENT_FK" orderby="id asc" ;
            "Indicators system version"
			- @IndicatorsSystemVersion indicatorsSystemVersion cascade="none" fetch="lazy" nullable databaseColumn="INDICATORS_SYSTEM_VERSION_FK" <-> dimensions;
            
			"Provides access to Dimension"
            Repository DimensionRepository {
            	@Dimension save(@Dimension entity);
            	delete;
            	protected List<@Dimension> findByQuery(String query, Map<String, Object> parameters, int maxResult);
            	@Dimension findDimension(String uuid);
            }
        }  		
		
        BasicType IndicatorsSystemVersionInformation {
        	gap
        	"Id into database of IndicatorsSystemVersion"
    		Long idIndicatorsSystemVersion nullable databaseColumn="ID";
    		"Version number of IndicatorsSystemVersion"
    		String versionNumber nullable databaseColumn="VERSION_NUMBER" length="10";
    	}	
	}
	
	// ----------------------------------------------------------------
	// 							ENUMS
	// ----------------------------------------------------------------
	
	Module dtos {    	
		basePackage=es.gobcan.istac.indicators.core.dto
		
		"Dto for indicators system"
	   	DataTransferObject IndicatorsSystemDto extends @AuditableDto {
			
			"Unique uuid"
			String uuid;
			"Version number of this indicator system version"	
			String versionNumber;
			"State"
			- @IndicatorsSystemStateEnum state;
			"Semantic identifier of statistic operation"
       		String code;
       		"Uri of statistic operation in Gopestat"
       		String uriGopestat;
       		"Title of statistic operation"
       		- @InternationalStringDto title;
       		"Acronym of statistic operation"
       		- @InternationalStringDto acronym;
       		"Description of statistic operation"
       		- @InternationalStringDto description;
       		"Objetive of statistic operation"
       		- @InternationalStringDto objetive;			
       		"Number of version in production"
       		String productionVersion;
       		"Number of version in diffusion"   		
			String diffusionVersion;			
			
			"Date when the indicators system was sended to production validation"
			JAVADATE productionValidationDate;
			"User who sended to production validation"
			String productionValidationUser;
			"Date when the indicators system was sended to diffusion validation"
			JAVADATE diffusionValidationDate;
			"User who sended to diffusion validation"
			String diffusionValidationUser;
			"Date when the indicators system was published"
			JAVADATE publicationDate;
			"User who published"
			String publicationUser;
			"Date when the indicators system was archived"
			JAVADATE archiveDate;
			"User who archived"
			String archiveUser;
	    }
	    
	    "Dto for indicator"
	   	DataTransferObject IndicatorDto extends @AuditableDto {
			
			"Unique uuid"
			String uuid;
			"Version number of this indicator version"	
			String versionNumber;
			"Code"
			String code;
			"State"
			- @IndicatorStateEnum state;
       		"Name"
       		- @InternationalStringDto name;
       		"Acronym"
       		- @InternationalStringDto acronym;
       		"Subject code"
			String subjectCode;
			"Comment"
       		- @InternationalStringDto comment;
			"Notes"
       		- @InternationalStringDto notes;
       		"Note url"
       		String noteUrl;            
	    }
	    
	    "Dto for dimension"
	   	DataTransferObject DimensionDto extends @AuditableDto {
			
			"Unique uuid"
			String uuid;
			"Title"
			- @InternationalStringDto title;
			"Parent dimension"
			String parentDimensionUuid;			
       		"Subdimensions"
       		- List<@DimensionDto> subdimensions;            
	    }
	}
	
	// ----------------------------------------------------------------
	// 							ENUMS
	// ----------------------------------------------------------------
	
	Module enums {    	
		basePackage=es.gobcan.istac.indicators.core.enume

		"States of indicator system"
    	enum IndicatorsSystemStateEnum {
    		"In draft"
    		DRAFT,
    		"Pending of production validation"
    		PRODUCTION_VALIDATION,
    		"Pending of diffusion validation"
    		DIFFUSION_VALIDATION,
    		"Validation rejected"
    		VALIDATION_REJECTED,
    		"Published"
    		PUBLISHED,
    		"Archived"
    		ARCHIVED
    	}      
		"States of indicator"
    	enum IndicatorStateEnum {
    		DRAFT,
    		PRODUCTION_VALIDATION,
    		DIFFUSION_VALIDATION,
    		VALIDATION_REJECTED,
    		PUBLISHED,
    		ARCHIVED
    	}	
    	"Type of version of the change"
    	enum IndicatorsSystemVersionEnum {
    		MAJOR,
    		MINOR
    	}	
	}
}